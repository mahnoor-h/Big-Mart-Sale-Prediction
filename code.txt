X = big_mart.drop(columns='Item_Outlet_Sales', axis=1)
Y = big_mart['Item_Outlet_Sales']
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=7)
X_train.shape
y_train.shape
print(X.shape, X_train.shape, X_test.shape)
print(X_train_scaled.shape)  # should be (6818
print(y_train.shape)  # should be (2273, 8)
from sklearn.preprocessing import StandardScaler

scaler_X = StandardScaler()

# Fit only on training data to avoid data leakage
X_train_scaled = scaler_X.fit_transform(X_train)
X_test_scaled = scaler_X.transform(X_test)
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
linear_model = LinearRegression()
linear_model.fit(X_train_scaled, y_train)
y_pred = linear_model.predict(X_test_scaled)
print(y_pred.shape)
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np

# Predictions
#y_pred = linear_model.predict(X_test)

# MAE
mae = mean_absolute_error(y_test, y_pred)

# MSE
mse = mean_squared_error(y_test, y_pred)

# RMSE
rmse = np.sqrt(mse)

# R² Score
r2 = r2_score(y_test, y_pred)

# Print Results
print("Linear Regression Evaluation:")
print(f"MAE  : {mae:.2f}")
print(f"MSE  : {mse:.2f}")
print(f"RMSE : {rmse:.2f}")
print(f"R² Score: {r2:.4f}")


import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
import numpy as np

# # Features and target
# X = big_mart.drop(columns=['Item_Outlet_Sales'])   # All features
# y = big_mart['Item_Outlet_Sales']                  # Target

# # Split into training and testing sets
# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
xgb_model = xgb.XGBRegressor(
    #objective='reg:squarederror',  # Use this to avoid warning
    n_estimators=100,
    learning_rate=0.1,
    max_depth=6,
    random_state=42
)

xgb_model.fit(X_train_scaled, y_train)
# Predictions
#y_pred = linear_model.predict(X_test)

# MAE
mae = mean_absolute_error(y_test, y_pred)

# MSE
mse = mean_squared_error(y_test, y_pred)

# RMSE
rmse = np.sqrt(mse)

# R² Score
r2 = r2_score(y_test, y_pred)

# Print Results
print("Linear Regression Evaluation:")
print(f"MAE  : {mae:.2f}")
print(f"MSE  : {mse:.2f}")
print(f"RMSE : {rmse:.2f}")
print(f"R² Score: {r2:.4f}")
import matplotlib.pyplot as plt

xgb.plot_importance(xgb_model, importance_type='gain', max_num_features=10, height=0.5)
plt.title("Top 10 Important Features")
plt.show()
